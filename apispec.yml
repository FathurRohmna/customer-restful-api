openapi: '3.0.3'
info:
  title: Customer RESTful API
  version: '1.0'
  description: API Spec for Customer RESTful API
servers:
  - url: http://localhost:8080/api
paths:
  /customers:
    get:
      tags:
        - Customer
      summary: List all Customers
      description: List all Customers
      responses:
        '200':
          description: Success get all customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Customer
      summary: Create Customer
      description: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerRequest"
      responses:
        '201':
          description: Success create customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '400':
          $ref: "#/components/responses/ValidationError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /customers/{customerId}:
    get:
      tags:
        - Customer
      summary: Get Customer by Id
      description: Retrieve a customer by Id
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        '200':
          description: Success get customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Customer
      summary: Update Customer by Id
      description: Update customer by id
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomerRequest"
      responses:
        '200':
          description: Success update customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        '400':
          $ref: "#/components/responses/ValidationError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Customer
      summary: Delete Customer by Id
      description: Remove a customer by id
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        '204':
          description: Success delete customer
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
      required:
        - name
        - email
        - phone
    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
    CustomerResponse:
      type: object
      properties:
        code:
          type: number
        status:
          type: string
        data:
          $ref: "#/components/schemas/Customer"
  parameters:
    CustomerId:
      name: customerId
      in: path
      required: true
      description: Customer Id
      schema:
        type: string
  responses:
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: "BAD REQUEST"
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "Name"
                    error:
                      type: string
                      example: "This field is required"


    NotFoundError:
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 404
              status:
                type: string
                example: "NOT FOUND"
              data:
                type: string
                example: "Customer not found"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 500
              status:
                type: string
                example: "INTERNAL SERVER ERROR"
              data:
                type: string
                example: "Unexpected error occurred"
